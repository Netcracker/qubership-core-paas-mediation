// Code generated by MockGen. DO NOT EDIT.
// Source: wsController.go

// Package controller is a generated GoMock package.
package v2

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockWsConn is a mock of WsConn interface.
type MockWsConn struct {
	ctrl     *gomock.Controller
	recorder *MockWsConnMockRecorder
}

// MockWsConnMockRecorder is the mock recorder for MockWsConn.
type MockWsConnMockRecorder struct {
	mock *MockWsConn
}

// NewMockWsConn creates a new mock instance.
func NewMockWsConn(ctrl *gomock.Controller) *MockWsConn {
	mock := &MockWsConn{ctrl: ctrl}
	mock.recorder = &MockWsConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWsConn) EXPECT() *MockWsConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWsConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWsConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWsConn)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockWsConn) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockWsConnMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWsConn)(nil).ReadMessage))
}

// SetCloseHandler mocks base method.
func (m *MockWsConn) SetCloseHandler(h func(int, string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCloseHandler", h)
}

// SetCloseHandler indicates an expected call of SetCloseHandler.
func (mr *MockWsConnMockRecorder) SetCloseHandler(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloseHandler", reflect.TypeOf((*MockWsConn)(nil).SetCloseHandler), h)
}

// WriteControl mocks base method.
func (m *MockWsConn) WriteControl(msgType int, data []byte, deadline time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteControl", msgType, data, deadline)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteControl indicates an expected call of WriteControl.
func (mr *MockWsConnMockRecorder) WriteControl(msgType, data, deadline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteControl", reflect.TypeOf((*MockWsConn)(nil).WriteControl), msgType, data, deadline)
}

// WriteMessage mocks base method.
func (m *MockWsConn) WriteMessage(msgType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", msgType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWsConnMockRecorder) WriteMessage(msgType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWsConn)(nil).WriteMessage), msgType, data)
}
